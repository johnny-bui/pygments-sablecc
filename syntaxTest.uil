/* 
 *   file  : syntaxTest.uil 
 * author  : Hong Phuc Bui
 * created : May 29, 2012
 * description:
 *		Test "all" posible syntatic accepted input for UIL Parser
 */


/*===============================================*/
/*===============================================*/
/*===============================================*/
/*===============================================*/
/* variable declaration */
var a = 10.0, aa = 1; // 
var cc = .1000, d = .100;
var b = a;
var c = [1,2,3,4];
var d = {1,2,3,4};
var e = [{1,2},{3,4}, 5 ,6];
var f = {1,2,[3,4],5,6};
var x = a + b;
var y = a * (b + d);
var g, h,j, k;
var l = 1, m = 2, n = 3.0;
var uft8 = "äöüÄÖÜß";

/* constant declaration */
const A = 1000;
const C = A + 2000;
const D = [1,2,3,4,5];
const E = {a[.]};

/*===============================================*/
/*===============================================*/
/*===============================================*/
/*===============================================*/

/* expression, expression statement, and assign */
/* ******************************************** */
/* =========== boolean algebra ================ */
// or 
TRUE or TRUE;             // expression
a = TRUE or TRUE;         // assign to a variable
// and
TRUE and FALSE; 
b = TRUE and FALSE;

/* =========== set algebra ==================== */
// setminus
{1 ,2, 3,4 } setminus  {a, b, c, 1};
c = {1 ,2, 3,4 } setminus  {a, b, c, 1};
// intersect
{1, 2, 3, 4} union {4, 3, 2, 1};
d ={1, 2, 3, 4} union {4, 3, 2, 1};
/* ============ comparision ==================== */
// equality
100 == 100.0;
e = 100 == 100.0;
// not equals
100.00001 != 100;
f = 1000.00001 != 100;
// little than
1000 < 10000.01;
g = 10000 < 1000.01;
// greater than
1222 > 11111;
h = 12222 > 1111;
// litle than or equal
10000.00001 <= 10000;
i = 10000.00001 <= 10000;
// greater than equals
10000.00001 >= 10000;
i = 10000.00001 >= 10000;
/* ========= check element in a collection */
2 in {1, 2, 3, 4, 5};
a = 2 in {1, 3, 1+1, 5};
3.0 in [1, 2, 1+1+1, 4, 5];
b = 3.0 in [1, 2, 1+1+1, 4, 5];
/* ========= addition ========================== */
12 + 10;                 // int + int
xx = 12 + 10;            // int + int
12 + 12.5;               // float + float
yy = 12 + 12.5;          // float + float
12 + 13 + "xxxx";        // int + string
zz = 12 + 13 + "xxxx";   // int + string
[] + {};                 // make no sense but syntactical OK
zzzz = [] + {};          // make no sense but syntactical OK
[1, 2, 3, 4] + {a, b, b}; // s.o.
jjjj = [1, 2, 3, 4] + {a, b, b}; // s.o.
/* ========= multiplication =================== */
23 * 1000;
23 * (1+2) * (3+4);
2 + 4 * 3;
3 * [1, 3, 5, 7];        // should make new array like [1*3, 3*3, 5*3, 7*3];
[1, 3, 5, 7] * 3;        // should make new array like [1*3, 3*3, 5*3, 7*3];
23 / 0;                  // semantical error but syntax OK
1/5.0/5;                 // should be (1/5.0)/5;
10 mod 3;
/* ======== power ============================== */
a^b;
x = a^b;
x ^ 12; 
y = x ^ 12 ^3;          // should be y = (x^12) ^ 3; 
E ^ 5;
z = E ^ 5;
/* ======= unary plus */
a = + - 2;
a = - + a;
/* ======= not expression ====================== */
a = not b;
b = not TRUE;
c = not (TRUE and FALSE);
/* ======== factorial ========================== */
a = 3!;
b = +++++ ----- q !!!!!!!;
/* ======== function call ====================== */
a = solve(a*x^2 + b*x + c == 0, x);
x = int(a*x^2 + b*x + c == 0, x := 1 .. 3);
y = lim(x^2/x , x := 0);
x = int(a*x^2 + b*x + c == 0, x := -sin(PI) .. sin(PI));
x = int(a*x^2 + b*x + c == 0, x := 1 .. cos(PI));
y = lim(x^2/x , x := y*3 + 4*x);
z = lim(x^2/x, x := t);
min = 1; max = 10;
t = int (x^3/x^2-1, x:= min .. max);

/*===============================================*/
/*===============================================*/
/*===============================================*/
/*===============================================*/
/* if statement */

/* simple executeable part */
/* ******************************************** */
if (a < b)
	print ("a ist kleiner als b.");

if (a < b)
	print ("a ist kleiner als b.");
else
	print ("a is nicht kleiner als b.");

/* multiple executeable */
/* ******************************************** */
if (a < b)
begin
	print (a);
	print (" < ");
	print (b);
end// no need a ; after end

if (a < b)
begin
	print (a);
	print (" < ");
	print (b);
end else begin// no need a ; after end
	print (b);
	print ("kleiner als oder gleich");
	print (a);
end

if ( a! > b !)
	print ("a größer als b");
else
	print ("a is nicht größer als b");

/* combination */
/* ******************************************** */
var a = TRUE;
if (a)
begin 
	print ("always be excecuted");
	print ("no sense statement");
end
else
	print ("never executed");


/*===============================================*/
/*===============================================*/
/*===============================================*/
/*===============================================*/
/* while statement */
var i = 10;
var a = [1,2,3,4,5,6,7,8,9];
while (i > 0)
begin 
	print (a[i-1]);
	if (a[i-1] mod 2 == 0)
	begin
		print (a[i-1]);
		print ("ist eine gerade Zahl");
	end else
	begin
		print (a[i-1]);
		print ("ist eine ungerade Zahl");
	end
	i = i-1;
end

var j = 0;
while (j < 10)
	j = j +1;


/*===============================================*/
/*===============================================*/
/*===============================================*/
/*===============================================*/
/* for statement */
/* full for statement with for-init, for-update, for-expression */
for (var i = 10, j = 100; i < j; i=i+1, j = j - 2)// two new variable are created
begin
	print (i);
	print (j);
end

/* without any sttm in for-header and an empty statemen */
for (;;);

/* with only execute */
for(;;) print ("endlos schleife");


/* without for-init */
i = 0;
j = 10;
for(; i < j; i=i+1, j = j -1)
begin
	print (i+j);
end

/* without for-expression */
for(i = 0; ;i = i+1, j = j-1)// the old variable is new assigned for (i=0, j = 10) ... is not allowed
begin
	print ("i: " + i + "j: " + j);
end

/*without for-update*/
for (i = 0; i < size(a);)
begin
	print (a[i]);
	i = i+1;
end

/* only update */
var i = 10;
for(;; i = i / 2)
	print (i);

/* only expression */
var i = 10;
for ( ;i < 0; )
	print (i);

/* only init */
for(i = 10;;)
	print (i);

/* comon use case: calculate approximate the area under the function f:x -> x^2/4 
   x = 0 to 10
 */
f:x -> x^2 /4;

var sum = 0; // area
var b = 0.1; 
var min = 0;
var max = 10;
var a = [];

var c = min;
var i = 0;
while (c < max)
begin
	a[i] = f(c);// calculate the area of the trapezoid
	i = i +1;
	c = c+b;
end

for (var i = 0; i < size(a) - 1; i = i+1)
begin
	sum = sum + (a[i] + a[i+1]);
end

print ("area under the function f : x -> x^2/4 in interval from " +  min + "to inteval " + max);
print (sum);

/*===============================================*/
/*===============================================*/
/*===============================================*/
/*===============================================*/
/* function definition statement */

/* light-weight */
f: x -> x^2/x;
f: (x,y) -> (x^2 + y^2)/2;
/* heavy-weight */
function maxOf (x,y,z)
begin
	var max;
	if (x > y and y > z)
		max = x;
	else 
		if (y <= z) // second term false: z > y
			if (x >= z) // must check the first and last number x>z
				max = x;
			else   // z > y, z > x
				max = z;
		else      // second term true: y > z and y > x 
			max = y;
end

function lim(f, x:= a)
begin
	return eval("limit(" + f + "," + x + "," + a + ");"  );
end

function int(f, x := a..b)
begin
	return eval("integrate ("+ f + "," + x + "," + a + "," + b + ");" );
end

// bug collection :D
/* 
 expect the parser to allow [1,2,3][1] (sematic: it returns the second elememnt
 of the array [1,2,3], that is  2) but the parser doesn't.
*/



/* 
	filename   : UILConst.uil
	created on : May 31, 2012
	description: this file is not a regular UIL. It define the presentation
	of constants/keywords in specific CAS, here is maxima. 

	* For each 
	constant an instance of ExprNode like belows is created and inserted
	in the table as the time the table is initialized.
	ExprNode const<ID>
	{
		casCode = <ID>;
		uilCode = <rhs of ID>;
		type = UILType.symbolic;
		value = null;
		rewriteable = false;
	}
	* For each variable in 
	an string is create and 
*/

const PI = "%pi";
const E = "%e";
/**
 * INF is complex infinity
 * + INF is positive infinity
 * - INF is negative infinity
 * in Maxima: inf is positive infinity
 *           minf is negative infinity
 *       infinity is complex initinity
 */
const INF = "infinity";
const I = "%i";

/* keywords in maxima */
/** TODO: search it later in documents  */
var thru;
var minf; // negative infinity
var inf;  // positive infinity
var ev; // evaluates an expression
// ......


if (a > b)
	print ("a > b");

